.DSEG
_tmp_:.byte 2

.DEF temp = r16
.DEF clear_lcd = r17
.DEF gas_led = r18
.DEF gas_detected = r19

.CSEG
.include "m16def.inc"

.org 0x00
rjmp main
.org 0x10
rjmp ISR_TIMER1_OVF
.org 0x1C
rjmp ISR_ADC

main:
	ldi r24, low(RAMEND)	;Initialize stack pointer
	out SPL, r24
	ldi r24, high(RAMEND)
	out SPH, r24

	clr temp
	clr clear_lcd
	clr gas_led
	clr gas_detected
	clr r28
	clr r20
	clr r21

	clt

	ldi r24, (1 << PC7)|(1 << PC6)|(1 << PC5)|(1 << PC4)	;Initialize 4 MSB of PORTC as outputs
	out DDRC, r24

	ser r24
	out DDRB, r24			;Initialize LEDs
	out DDRD, r24			;Initialize PORTD(LCD) as output

	rcall ADC_init
	rcall TCNT1_init

	clr r24
	rcall lcd_init_sim

	sei

	first_button:
		rcall scan_keypad_rising_edge_sim
        mov r22, r24
        or r22, r25
		cpi r22, 0

		out PORTB, gas_led

		breq first_button
    first_ascii:
		rcall keypad_to_ascii_sim
		mov r20, r24		;first button

	second_button:
		rcall scan_keypad_rising_edge_sim
        mov r22, r24
        or r22, r25
        cpi r22, 0

		out PORTB, gas_led

		breq second_button
    second_ascii:
		rcall keypad_to_ascii_sim
		mov r21, r24		;second button

	check:
		cpi r20, '7'
		brne wrong
        cpi r21, '1'
        brne wrong

	correct:
		cli					;Stop global interrupts

        rcall lcd_init_sim

        ldi r24, 'W'
        rcall lcd_data_sim
        ldi r24, 'E'
        rcall lcd_data_sim
        ldi r24, 'L'
        rcall lcd_data_sim
        ldi r24, 'C'
        rcall lcd_data_sim
        ldi r24, 'O'
        rcall lcd_data_sim
        ldi r24, 'M'
        rcall lcd_data_sim
        ldi r24, 'E'
        rcall lcd_data_sim

        rcall scan_keypad_rising_edge_sim   ;for successful remote operation

		ldi r24, 0x80

		out PORTB, r24

		ldi r24, low(4000)
		ldi r25, high(4000)
		rcall wait_msec

		clr r24
		out PORTB, r24
		rcall lcd_init_sim
		clr gas_detected
		clr clear_lcd
		sei
		jmp first_button
		
	wrong:
        rcall scan_keypad_rising_edge_sim   ;for successful remote operation

		ldi r24,4			;Number of loops
    wrong_loop:				;4 loops of 0.5 sec off 0.5 on
		push r24			;Save number of loops
		;TURN ON
		ldi r24, 0x80
		or r24, gas_led		;Get state of gas leds
		out PORTB, r24		;Output to leds, both MSB and gas
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		ldi r24, 0x80
		or r24, gas_led		;Get state of gas leds
		out PORTB, r24		;Output to leds, both MSB and gas
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		ldi r24, 0x80
		or r24, gas_led		;Get state of gas leds
		out PORTB, r24		;Output to leds, both MSB and gas
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		ldi r24, 0x80
		or r24, gas_led		;Get state of gas leds
		out PORTB, r24		;Output to leds, both MSB and gas
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		ldi r24, 0x80
		or r24, gas_led		;Get state of gas leds
		out PORTB, r24		;Output to leds, both MSB and gas
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec
		;TURN OFF
		mov r24, gas_led
		out PORTB, r24
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		mov r24, gas_led
		out PORTB, r24
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		mov r24, gas_led
		out PORTB, r24
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		mov r24, gas_led
		out PORTB, r24
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		mov r24, gas_led
		out PORTB, r24
		ldi r24, low(100)
		ldi r25, high(100)
		rcall wait_msec		;Wait 0.1 sec

		mov r24, gas_led
		out PORTB, r24

		pop r24
		subi r24, 1			;Subtract one loop
		brne wrong_loop


	jmp first_button

	wait_msec:
		push r24
		push r25
		ldi r24, low(1000)
		ldi r25, high(1000)
		rcall wait_usec
		pop r25
		pop r24
		sbiw r24, 1
		brne wait_msec

		ret

	wait_usec:
		sbiw r24, 1 ;2 cycles
		nop
		nop
		nop
		nop
		brne wait_usec ;1 cycle the majority of the time

		ret

	ADC_init:
		ldi r24, (1 << REFS0)
		out ADMUX, r24

		ldi r24, (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0)
		out ADCSRA, r24
		ret

	TCNT1_init:
		ldi r24, (1 << TOIE1)
		out TIMSK, r24

		ldi r24, (1 << CS12) | (0 << CS11) | (1 << CS10)
		out TCCR1B, r24

		;Clock at 8MHz
		;8MHz / 1024(prescale) = 7812.5Hz
		;Interrupt every 100ms | interrupt every 0.1 * 7812.5 = 781.25 cycles
		;Overflow happens at 65536 cycles. Therefore start counting from 65536 - 781.25 = 64755 = 0xFCF3
		ldi r24, 0xFC
		out TCNT1H, r24
		ldi r24, 0xF3
		out TCNT1L, r24

		ret

	ISR_TIMER1_OVF:
		push r24

		cpi r28, 0x01
		brne continue_1

		brtc continue_1
		clt
		jmp continue_2

	continue_1:
		set
	continue_2:
		in r24, SREG
		push r24
		ldi r24, (1 << CS12) | (0 << CS11) | (1 << CS10)
		out TCCR1B, r24

		ldi r24, 0xFC			;Initialize counter at 64755
		out TCNT1H, r24
		ldi r24, 0xF3
		out TCNT1L, r24

		in r24, ADCSRA
		ori r24, (1 << ADSC)	;Start AD Conversion
		out ADCSRA, r24

		pop r24					;restore SREG and r24
		out SREG, r24
		pop r24

		reti

	ISR_ADC:
		push r25
		push r24
		in r24, SREG
		push r24

		in r24, ADCL
		in r25, ADCH

		cpi r24, 0x80			; adc < 128
		cpc r25, r1
		brcs long_jump_under_128

		cpi r24, 0xCD
		cpc r25, r1				; adc < 205 (70ppm)
		brcs long_jump_under_205
		;This code is over 70ppm
		ldi r28, 0x01

		brts continue_adc
		clr gas_led
		jmp ISR_ADC_EXIT
	long_jump_under_128:
		jmp under_128
	long_jump_under_205:
		jmp under_205 
	continue_adc:
		cpi gas_detected, 0x01
		breq dont_show_LCD

		rcall lcd_init_sim		; Clear LCD

		ldi r24, 'G' 
		rcall lcd_data_sim
		ldi r24, 'A'
		rcall lcd_data_sim
		ldi r24, 'S'
		rcall lcd_data_sim
		ldi r24, ' '
		rcall lcd_data_sim
		ldi r24, 'D'
		rcall lcd_data_sim
		ldi r24, 'E'
		rcall lcd_data_sim
		ldi r24, 'T'
		rcall lcd_data_sim
		ldi r24, 'E'
		rcall lcd_data_sim
		ldi r24, 'C'
		rcall lcd_data_sim
		ldi r24, 'T'
		rcall lcd_data_sim
		ldi r24, 'E'
		rcall lcd_data_sim
		ldi r24, 'D'
		rcall lcd_data_sim

		ldi gas_detected, 0x01
		clr clear_lcd
	dont_show_LCD:

		cp r24, r1				; adc < 256
		ldi temp, 0x01
		cpc r25, temp
		brcs under_256

		cpi r24, 0x80			; adc < 384
		ldi temp, 0x01
		cpc r25, temp
		brcs under_384

		cp r24, r1				; adc < 512
		ldi temp, 0x02
		cpc r25, temp
		brcs under_512

		cpi r24, 0x01			; adc < 640
		ldi temp, 0x02
		cpc r25, temp
		brcs under_640

		cp r24, r1				; adc < 768
		ldi temp, 0x03
		cpc r25, temp
		brcs under_768

		cpi r24, 0x01			; adc < 896
		ldi temp, 0x03
		cpc r25, temp		
		brcs under_896

		ldi gas_led, 0x7F
		jmp ISR_ADC_EXIT
	under_128:
		clr r28
		cpi clear_lcd, 0x01
		breq dont_show_clear_128

		rcall lcd_init_sim		; Clear LCD

		ldi r24, 'C' 
		rcall lcd_data_sim
		ldi r24, 'L'
		rcall lcd_data_sim
		ldi r24, 'E'
		rcall lcd_data_sim
		ldi r24, 'A'
		rcall lcd_data_sim
		ldi r24, 'R'
		rcall lcd_data_sim

		ldi clear_lcd, 0x01

	dont_show_clear_128:
		clr gas_detected
		clr gas_led
		jmp ISR_ADC_EXIT

	under_205:
		clr r28
		cpi clear_lcd, 0x01
		breq dont_show_clear_205

		rcall lcd_init_sim		; Clear LCD

		ldi r24, 'C' 
		rcall lcd_data_sim
		ldi r24, 'L'
		rcall lcd_data_sim
		ldi r24, 'E'
		rcall lcd_data_sim
		ldi r24, 'A'
		rcall lcd_data_sim
		ldi r24, 'R'
		rcall lcd_data_sim

		ldi clear_lcd, 0x01

	dont_show_clear_205:
		clr gas_detected
		ldi gas_led, 0x01
		jmp ISR_ADC_EXIT

	under_256:
		ldi gas_led, 0x01
		jmp ISR_ADC_EXIT

	under_384:
		ldi gas_led, 0x03
		jmp ISR_ADC_EXIT

	under_512:
		ldi gas_led, 0x07
		jmp ISR_ADC_EXIT

	under_640:
		ldi gas_led, 0x0F
		jmp ISR_ADC_EXIT

	under_768:
		ldi gas_led, 0x1F
		jmp ISR_ADC_EXIT
		
	under_896:
		ldi gas_led, 0x3F

	ISR_ADC_EXIT:
		pop r24
		out SREG, r24
		pop r24
		pop r25

		reti
			

	scan_row_sim:
        out PORTC, r25 ; ? ?????????? ?????? ??????? ??? ?????? ‘1’
        push r24 ; ????? ?????? ??? ??????????? ??? ?? ?????
        push r25 ; ?????????? ??? ???????????? ??????????????
        ldi r24,low(500) ; ?????????
        ldi r25,high(500)
        rcall wait_usec
        pop r25
        pop r24 ; ????? ????? ??????
        nop
        nop ; ??????????? ??? ?? ???????? ?? ????? ? ?????? ??????????
        in r24, PINC ; ??????????? ?? ?????? (??????) ??? ????????? ??? ????? ?????????
        andi r24 ,0x0f ; ????????????? ?? 4 LSB ???? ?? ‘1’ ???????? ??? ????? ?????????
        ret ; ?? ?????????

	scan_keypad_sim:
        push r26 ; ?????????? ???? ??????????? r27:r26 ????? ????
        push r27 ; ????????? ???? ???? ???????
        ldi r25 , 0x10 ; ?????? ??? ????? ?????? ??? ????????????? (PC4: 1 2 3 A)
        rcall scan_row_sim
        swap r24 ; ?????????? ?? ??????????
        mov r27, r24 ; ??? 4 msb ??? r27
        ldi r25 ,0x20 ; ?????? ?? ??????? ?????? ??? ????????????? (PC5: 4 5 6 B)
        rcall scan_row_sim
        add r27, r24 ; ?????????? ?? ?????????? ??? 4 lsb ??? r27
        ldi r25 , 0x40 ; ?????? ??? ????? ?????? ??? ????????????? (PC6: 7 8 9 C)
        rcall scan_row_sim
        swap r24 ; ?????????? ?? ??????????
        mov r26, r24 ; ??? 4 msb ??? r26
        ldi r25 ,0x80 ; ?????? ??? ??????? ?????? ??? ????????????? (PC7: * 0 # D)
        rcall scan_row_sim
        add r26, r24 ; ?????????? ?? ?????????? ??? 4 lsb ??? r26
        movw r24, r26 ; ???????? ?? ?????????? ????? ??????????? r25:r24
        clr r26 ; ?????????? ??? ??? ????????????? ????????
        out PORTC,r26 ; ?????????? ??? ??? ????????????? ????????
        pop r27 ; ????????? ???? ??????????? r27:r26
        pop r26
        ret

	scan_keypad_rising_edge_sim:
        push r22 ; ?????????? ???? ??????????? r23:r22 ??? ????
        push r23 ; r26:r27 ????? ???? ????????? ???? ???? ???????
        push r26
        push r27
        rcall scan_keypad_sim ; ?????? ?? ???????????? ??? ?????????? ?????????
        push r24 ; ??? ?????????? ?? ??????????
        push r25
        ldi r24 ,15 ; ??????????? 15 ms (??????? ????? 10-20 msec ??? ??????????? ??? ???
        ldi r25 ,0 ; ???????????? ??? ????????????? – ????????????? ????????????)
        rcall wait_msec
        rcall scan_keypad_sim ; ?????? ?? ???????????? ???? ??? ????????
        pop r23 ; ??? ??????? ?????????? ???????????
        pop r22
        and r24 ,r22
        and r25 ,r23
        ldi r26 ,low(_tmp_) ; ??????? ??? ????????? ??? ????????? ????
        ldi r27 ,high(_tmp_) ; ??????????? ????? ??? ???????? ????? r27:r26
        ld r23 ,X+
        ld r22 ,X
        st X ,r24 ; ?????????? ??? RAM ?? ??? ?????????
        st -X ,r25 ; ??? ?????????
        com r23
        com r22 ; ???? ???? ????????? ??? ????? «?????» ???????
        and r24 ,r22
        and r25 ,r23
        pop r27 ; ????????? ???? ??????????? r27:r26
        pop r26 ; ??? r23:r22
        pop r23
        pop r22
        ret 

	keypad_to_ascii_sim:
        push r26 ; ?????????? ???? ??????????? r27:r26 ????? ????
        push r27 ; ????????? ???? ??? ???????
        movw r26 ,r24 ; ?????? ‘1’ ???? ?????? ??? ?????????? r26 ????????
        ; ?? ???????? ??????? ??? ????????
        ldi r24 ,'*'
        ; r26
        ;C 9 8 7 D # 0 *
        sbrc r26 ,0
        rjmp return_ascii
        ldi r24 ,'0'
        sbrc r26 ,1
        rjmp return_ascii
        ldi r24 ,'#'
        sbrc r26 ,2
        rjmp return_ascii
        ldi r24 ,'D'
        sbrc r26 ,3 ; ?? ??? ????? ‘1’??????????? ??? ret, ?????? (?? ????? ‘1’)
        rjmp return_ascii ; ?????????? ?? ??? ?????????? r24 ??? ASCII ???? ??? D.
        ldi r24 ,'7'
        sbrc r26 ,4
        rjmp return_ascii
        ldi r24 ,'8'
        sbrc r26 ,5
        rjmp return_ascii
        ldi r24 ,'9'
        sbrc r26 ,6
        rjmp return_ascii ;
        ldi r24 ,'C'
        sbrc r26 ,7
        rjmp return_ascii
        ldi r24 ,'4' ; ?????? ‘1’ ???? ?????? ??? ?????????? r27 ????????
        sbrc r27 ,0 ; ?? ???????? ??????? ??? ????????
        rjmp return_ascii
        ldi r24 ,'5'
        ;r27
        ;? 3 2 1 B 6 5 4
        sbrc r27 ,1
        rjmp return_ascii
        ldi r24 ,'6'
        sbrc r27 ,2
        rjmp return_ascii
        ldi r24 ,'B'
        sbrc r27 ,3
        rjmp return_ascii
        ldi r24 ,'1'
        sbrc r27 ,4
        rjmp return_ascii ;
        ldi r24 ,'2'
        sbrc r27 ,5
        rjmp return_ascii
        ldi r24 ,'3' 
        sbrc r27 ,6
        rjmp return_ascii
        ldi r24 ,'A'
        sbrc r27 ,7
        rjmp return_ascii
        clr r24
        rjmp return_ascii
        return_ascii:
        pop r27 ; ????????? ???? ??????????? r27:r26
        pop r26
        ret 

	write_2_nibbles_sim:
        push r24 ; ????? ?????? ??? ??????????? ??? ?? ?????
        push r25 ; ?????????? ??? ???????????? ??????????????
        ldi r24 ,low(6000) ; ?????????
        ldi r25 ,high(6000)
        rcall wait_usec
        pop r25
        pop r24 ; ????? ????? ??????
        push r24 ; ??????? ?? 4 MSB
        in r25, PIND ; ??????????? ?? 4 LSB ??? ?? ?????????????
        andi r25, 0x0f ; ??? ?? ??? ????????? ??? ????? ??????????? ?????????
        andi r24, 0xf0 ; ????????????? ?? 4 MSB ???
        add r24, r25 ; ???????????? ?? ?? ???????????? 4 LSB
        out PORTD, r24 ; ??? ???????? ???? ?????
        sbi PORTD, PD3 ; ????????????? ?????? Enable ???? ????????? PD3
        cbi PORTD, PD3 ; PD3=1 ??? ???? PD3=0
        push r24 ; ????? ?????? ??? ??????????? ??? ?? ?????
        push r25 ; ?????????? ??? ???????????? ??????????????
        ldi r24 ,low(6000) ; ?????????
        ldi r25 ,high(6000)
        rcall wait_usec
        pop r25
        pop r24 ; ????? ????? ??????
        pop r24 ; ??????? ?? 4 LSB. ????????? ?? byte.
        swap r24 ; ????????????? ?? 4 MSB ?? ?? 4 LSB
        andi r24 ,0xf0 ; ??? ?? ??? ????? ???? ?????????????
        add r24, r25
        out PORTD, r24
        sbi PORTD, PD3 ; ???? ?????? Enable
        cbi PORTD, PD3
        ret

	lcd_data_sim:
        push r24
        push r25
        sbi PORTD,PD2
        rcall write_2_nibbles_sim
        ldi r24,43
        ldi r25,0
        rcall wait_usec
        pop r25
        pop r24
        ret

	lcd_command_sim:
        push r24 ; ?????????? ???? ??????????? r25:r24 ????? ????
        push r25 ; ????????? ???? ??? ???????
        cbi PORTD, PD2 ; ??????? ??? ?????????? ??????? (PD2=0)
        rcall write_2_nibbles_sim ; ???????? ??? ??????? ??? ??????? 39?sec
        ldi r24, 39 ; ??? ??? ?????????? ??? ????????? ??? ??? ??? ??????? ??? lcd.
        ldi r25, 0 ; ???.: ???????? ??? ???????, ?? clear display ??? return home,
        rcall wait_usec ; ??? ???????? ????????? ?????????? ??????? ????????.
        pop r25 ; ????????? ???? ??????????? r25:r24
        pop r24
        ret 

	lcd_init_sim:
        push r24 ; ?????????? ???? ??????????? r25:r24 ????? ????
        push r25 ; ????????? ???? ??? ???????

        ldi r24, 40 ; ???? ? ???????? ??? lcd ????????????? ??
        ldi r25, 0 ; ????? ??????? ??? ???? ??? ????????????.
        rcall wait_msec ; ??????? 40 msec ????? ???? ?? ???????????.
        ldi r24, 0x30 ; ?????? ????????? ?? 8 bit mode
        out PORTD, r24 ; ?????? ??? ???????? ?? ??????? ???????
        sbi PORTD, PD3 ; ??? ?? ?????????? ??????? ??? ???????
        cbi PORTD, PD3 ; ??? ??????, ? ?????? ???????????? ??? ?????
        ldi r24, 39
        ldi r25, 0 ; ??? ? ???????? ??? ?????? ????????? ?? 8-bit mode
        rcall wait_usec ; ??? ?? ?????? ??????, ???? ?? ? ???????? ???? ??????????
        ; ??????? 4 bit ?? ??????? ?? ?????????? 8 bit
        push r24 ; ????? ?????? ??? ??????????? ??? ?? ?????
        push r25 ; ?????????? ??? ???????????? ??????????????
        ldi r24,low(1000) ; ?????????
        ldi r25,high(1000)
        rcall wait_usec
        pop r25
        pop r24 ; ????? ????? ??????
        ldi r24, 0x30
        out PORTD, r24
        sbi PORTD, PD3
        cbi PORTD, PD3
        ldi r24,39
        ldi r25,0
        rcall wait_usec 
        push r24 ; ????? ?????? ??? ??????????? ??? ?? ?????
        push r25 ; ?????????? ??? ???????????? ??????????????
        ldi r24 ,low(1000) ; ?????????
        ldi r25 ,high(1000)
        rcall wait_usec
        pop r25
        pop r24 ; ????? ????? ??????
        ldi r24,0x20 ; ?????? ?? 4-bit mode
        out PORTD, r24
        sbi PORTD, PD3
        cbi PORTD, PD3
        ldi r24,39
        ldi r25,0
        rcall wait_usec
        push r24 ; ????? ?????? ??? ??????????? ??? ?? ?????
        push r25 ; ?????????? ??? ???????????? ??????????????
        ldi r24 ,low(1000) ; ?????????
        ldi r25 ,high(1000)
        rcall wait_usec
        pop r25
        pop r24 ; ????? ????? ??????
        ldi r24,0x28 ; ??????? ?????????? ???????? 5x8 ????????
        rcall lcd_command_sim ; ??? ???????? ??? ??????? ???? ?????
        ldi r24,0x0c ; ???????????? ??? ??????, ???????? ??? ???????
        rcall lcd_command_sim
        ldi r24,0x01 ; ?????????? ??? ??????
        rcall lcd_command_sim
        ldi r24, low(1530)
        ldi r25, high(1530)
        rcall wait_usec
        ldi r24 ,0x06 ; ???????????? ????????? ??????? ???? 1 ??? ??????????
        rcall lcd_command_sim ; ??? ????? ???????????? ???? ??????? ??????????? ???
        ; ?????????????? ??? ????????? ????????? ??? ??????
        pop r25 ; ????????? ???? ??????????? r25:r24
        pop r24
		ret
